apply plugin: 'com.android.application'
apply plugin: 'android-junk-code'
apply from: '../gradle/appProductFlavors.gradle'

android {
    namespace rootProject.ext.android.applicationId
    compileSdk rootProject.ext.android.compileSdk
    buildFeatures {
        buildConfig true
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 打包时间
    def buildTime = new Date().format('yyyyMMddHHmm')
    applicationVariants.all { variant ->
        // apk 输出文件名配置
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name
                boolean isRelease = !fileName.contains("debug")
                fileName = rootProject.name + "_" + versionName + "_" + buildTime + "_" + (!isRelease ? "_debug" : "_release") + ".apk"
                outputFileName = fileName
            }
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api fileTree(include: ['*.aar'], dir: 'libs')
    // 谷歌归因
    implementation 'com.android.installreferrer:installreferrer:2.2'

    debugImplementation project(':lib_load_jni_c')
    implementation project(':lib_load_jni_java')
    // zip压缩解亚
//    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    // 注解
//    implementation 'androidx.annotation:annotation:1.6.0'
}

//https://github.com/qq549631030/AndroidJunkCode
androidJunkCode {
    def junkConfig = {
        //注意：这里的release是变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
        packageBase = "com.d08a3hqr.chtjikfd2"  //生成java类根包名
        packageCount = 30 //生成包数量
        activityCountPerPackage = 3 //每个包下生成Activity类数量
        excludeActivityJavaFile = false
        //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
        otherCountPerPackage = 50  //每个包下生成其它类的数量
        methodCountPerClass = 20  //每个类下生成方法数量
        resPrefix = "chtjikfd_"  //生成的layout、drawable、string等资源名前缀
        drawableCount = 300  //生成drawable资源数量
        stringCount = 300  //生成string数量
    }
    variantConfig {
        //注意：这里的debug,release为变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
        debug junkConfig
        release junkConfig
    }
}